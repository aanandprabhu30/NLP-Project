{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ec8c17bc-db92-4bd6-998b-85b36e0be066",
   "metadata": {},
   "source": [
    "# IT Subfield Classifier using SPECTER + XGBoost\n",
    "\n",
    "This notebook builds a subfield classifier for Information Technology research papers using:\n",
    "\n",
    "- **SPECTER embeddings** (from Title + Abstract)\n",
    "- **XGBoost** for classification\n",
    "- **LabelEncoder** for encoding subfields\n",
    "\n",
    "**Final IT Subfield Labels:**  \n",
    "- **CLD:** Cloud Systems  \n",
    "- **IOTNET:** IoT & Networked Systems  \n",
    "- **OPS:** IT Operations & Optimization  \n",
    "- **SEC:** Cybersecurity & Access Control\n",
    "\n",
    "**Target:**  \n",
    "Achieve high (>90%) classification accuracy across these four IT subfields."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1e5e3a7c-a4b4-4162-a1af-ecc9003da778",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All packages are already installed and ready ✅\n"
     ]
    }
   ],
   "source": [
    "import sentence_transformers\n",
    "import xgboost\n",
    "import sklearn\n",
    "import joblib\n",
    "\n",
    "print(\"All packages are already installed and ready ✅\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf5067d8-2b7f-44bc-943c-92c376cf73ac",
   "metadata": {},
   "source": [
    "## 1. Load and Prepare IT Subfield Dataset\n",
    "\n",
    "We load the `IT_subfields.csv` file from the Data/ directory. Each row contains:\n",
    "\n",
    "- **Title:** Research paper title  \n",
    "- **Abstract:** Paper abstract  \n",
    "- **Subfield:** IT subfield label (`CLD`, `IOTNET`, `OPS`, `SEC`)  \n",
    "- **Link:** Source URL for the paper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0b020131-1a3a-473b-b0d8-50d33d4c2655",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(504, 5)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Abstract</th>\n",
       "      <th>Subfield</th>\n",
       "      <th>Link</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Considerations for Cloud Security Operations</td>\n",
       "      <td>Information Security in Cloud Computing enviro...</td>\n",
       "      <td>CLD</td>\n",
       "      <td>http://arxiv.org/abs/1601.06289v1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Security of Cloud FPGAs: A Survey</td>\n",
       "      <td>Integrating Field Programmable Gate Arrays (FP...</td>\n",
       "      <td>CLD</td>\n",
       "      <td>http://arxiv.org/abs/2005.04867v1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Interoperability and Standardization of Interc...</td>\n",
       "      <td>Cloud computing is getting mature, and the int...</td>\n",
       "      <td>CLD</td>\n",
       "      <td>http://arxiv.org/abs/1212.5956v1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Application of Machine Learning Optimization i...</td>\n",
       "      <td>In recent years, cloud computing has been wide...</td>\n",
       "      <td>CLD</td>\n",
       "      <td>http://arxiv.org/abs/2402.17216v1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Evolution of Cloud Storage as Cloud Computing ...</td>\n",
       "      <td>Enterprises are driving towards less cost, mor...</td>\n",
       "      <td>CLD</td>\n",
       "      <td>http://arxiv.org/abs/1308.1303v1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               Title  \\\n",
       "0       Considerations for Cloud Security Operations   \n",
       "1                  Security of Cloud FPGAs: A Survey   \n",
       "2  Interoperability and Standardization of Interc...   \n",
       "3  Application of Machine Learning Optimization i...   \n",
       "4  Evolution of Cloud Storage as Cloud Computing ...   \n",
       "\n",
       "                                            Abstract Subfield  \\\n",
       "0  Information Security in Cloud Computing enviro...      CLD   \n",
       "1  Integrating Field Programmable Gate Arrays (FP...      CLD   \n",
       "2  Cloud computing is getting mature, and the int...      CLD   \n",
       "3  In recent years, cloud computing has been wide...      CLD   \n",
       "4  Enterprises are driving towards less cost, mor...      CLD   \n",
       "\n",
       "                                Link  \n",
       "0  http://arxiv.org/abs/1601.06289v1  \n",
       "1  http://arxiv.org/abs/2005.04867v1  \n",
       "2   http://arxiv.org/abs/1212.5956v1  \n",
       "3  http://arxiv.org/abs/2402.17216v1  \n",
       "4   http://arxiv.org/abs/1308.1303v1  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Step 1: Load dataset\n",
    "df = pd.read_csv(\"Data/IT_subfields.csv\")\n",
    "\n",
    "# Create input_text for embedding\n",
    "df[\"input_text\"] = df[\"Title\"].astype(str).str.strip() + \" \" + df[\"Abstract\"].astype(str).str.strip()\n",
    "\n",
    "# Show shape and preview only the 4 relevant columns\n",
    "print(df.shape)\n",
    "df[[\"Title\", \"Abstract\", \"Subfield\", \"Link\"]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9f6478a3-04bd-4f41-ae47-874865ecab82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    Considerations for Cloud Security Operations I...\n",
       "1    Security of Cloud FPGAs: A Survey Integrating ...\n",
       "2    Interoperability and Standardization of Interc...\n",
       "3    Application of Machine Learning Optimization i...\n",
       "4    Evolution of Cloud Storage as Cloud Computing ...\n",
       "Name: input_text, dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Preview the constructed input_text\n",
    "df[\"input_text\"].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca20c1af-a453-41dc-8433-88147d3abb80",
   "metadata": {},
   "source": [
    "## 2. Check Subfield Distribution and Encode Labels\n",
    "\n",
    "We inspect the number of papers per subfield to detect any class imbalance.  \n",
    "Next, we use `LabelEncoder` to convert subfield labels into numerical format required for model training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c9e0b859-08ea-44f8-a30a-d83ba6b1e7ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Subfield Distribution:\n",
      "\n",
      "CLD: 162\n",
      "IOTNET: 137\n",
      "SEC: 130\n",
      "OPS: 75\n"
     ]
    }
   ],
   "source": [
    "from collections import Counter\n",
    "\n",
    "# Check class distribution\n",
    "subfield_counts = Counter(df[\"Subfield\"])\n",
    "print(\"Subfield Distribution:\\n\")\n",
    "for subfield, count in subfield_counts.items():\n",
    "    print(f\"{subfield}: {count}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d6848f42-67ce-4c76-a2c3-466aee165681",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subfield</th>\n",
       "      <th>subfield_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CLD</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>IOTNET</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>OPS</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>SEC</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Subfield  subfield_label\n",
       "0       CLD               0\n",
       "50   IOTNET               1\n",
       "97      OPS               2\n",
       "52      SEC               3"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Encode subfield labels\n",
    "le = LabelEncoder()\n",
    "df[\"subfield_label\"] = le.fit_transform(df[\"Subfield\"])\n",
    "\n",
    "# Preview encoded labels\n",
    "df[[\"Subfield\", \"subfield_label\"]].drop_duplicates().sort_values(\"subfield_label\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3936c64c-1cf1-49ac-92f8-b439adc3c9f6",
   "metadata": {},
   "source": [
    "## 3. Generate SPECTER Embeddings\n",
    "\n",
    "We now load the `allenai-specter` model using `sentence-transformers` and generate dense 768-dimensional embeddings for each `text` entry.\n",
    "\n",
    "These embeddings will be used as features for training the XGBoost classifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "909750de-7395-4490-97ad-a894d54ec8ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5f11ffce0e11481a9959d3604ad8618d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Batches:   0%|          | 0/16 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sentence_transformers import SentenceTransformer\n",
    "\n",
    "# Load the pretrained SPECTER model\n",
    "model = SentenceTransformer(\"allenai-specter\")\n",
    "\n",
    "# Encode input text (this may take 1–2 minutes)\n",
    "X_embeddings = model.encode(df[\"input_text\"].tolist(), batch_size=32, show_progress_bar=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0b82ba9-10ca-42ea-bce0-c8e5d6169050",
   "metadata": {},
   "source": [
    "## 4. Train-Test Split\n",
    "\n",
    "We split the dataset into training and test sets using an 80/20 stratified split.  \n",
    "This ensures that each subfield is proportionally represented in both sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2c743da9-0f5a-4d68-9e0d-62f4de98a5cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train size: 403, Test size: 101\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Define features and labels\n",
    "X = X_embeddings\n",
    "y = df[\"subfield_label\"].values\n",
    "\n",
    "# 80/20 stratified split\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42, stratify=y\n",
    ")\n",
    "\n",
    "print(f\"Train size: {len(X_train)}, Test size: {len(X_test)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28bdec3c-5531-476c-bfb3-693e3607025e",
   "metadata": {},
   "source": [
    "## 5. Train XGBoost Classifier\n",
    "\n",
    "We now train an `XGBClassifier` on the SPECTER embeddings.  \n",
    "This model uses default hyperparameters and will serve as our baseline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "84927d17-e9a0-4b6d-83d3-0d0e04a2a2b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/envs/nlp-bert/lib/python3.10/site-packages/xgboost/training.py:183: UserWarning: [16:33:25] WARNING: /Users/runner/work/xgboost/xgboost/src/learner.cc:738: \n",
      "Parameters: { \"use_label_encoder\" } are not used.\n",
      "\n",
      "  bst.update(dtrain, iteration=i, fobj=obj)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=&#x27;mlogloss&#x27;,\n",
       "              feature_types=None, feature_weights=None, gamma=None,\n",
       "              grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "              num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://xgboost.readthedocs.io/en/release_3.0.0/python/python_api.html#xgboost.XGBClassifier\">?<span>Documentation for XGBClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=&#x27;mlogloss&#x27;,\n",
       "              feature_types=None, feature_weights=None, gamma=None,\n",
       "              grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "              num_parallel_tree=None, ...)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric='mlogloss',\n",
       "              feature_types=None, feature_weights=None, gamma=None,\n",
       "              grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "              num_parallel_tree=None, ...)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "\n",
    "# Initialize classifier\n",
    "xgb = XGBClassifier(\n",
    "    use_label_encoder=False,    # disables legacy label encoding warning\n",
    "    eval_metric='mlogloss',     # multiclass log-loss\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "# Train the model\n",
    "xgb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f145cf9-cac2-4f39-a2cc-753ffaf58c9f",
   "metadata": {},
   "source": [
    "## 6. Evaluate Model Performance\n",
    "\n",
    "We evaluate the classifier on the test set using:\n",
    "\n",
    "- Accuracy\n",
    "- Precision, Recall, and F1-score (per class)\n",
    "- Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6659c918-0477-48fb-a136-2cc6429a62e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         CLD       0.85      0.88      0.87        33\n",
      "      IOTNET       0.77      0.89      0.83        27\n",
      "         OPS       0.88      0.47      0.61        15\n",
      "         SEC       0.86      0.92      0.89        26\n",
      "\n",
      "    accuracy                           0.83       101\n",
      "   macro avg       0.84      0.79      0.80       101\n",
      "weighted avg       0.84      0.83      0.82       101\n",
      "\n",
      "Confusion Matrix:\n",
      "\n",
      "[[29  1  1  2]\n",
      " [ 1 24  0  2]\n",
      " [ 4  4  7  0]\n",
      " [ 0  2  0 24]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "# Predict on test set\n",
    "y_pred = xgb.predict(X_test)\n",
    "\n",
    "# Decode labels for readability\n",
    "label_names = le.classes_\n",
    "\n",
    "# Print classification report\n",
    "print(\"Classification Report:\\n\")\n",
    "print(classification_report(y_test, y_pred, target_names=label_names))\n",
    "\n",
    "# Show raw confusion matrix\n",
    "print(\"Confusion Matrix:\\n\")\n",
    "print(confusion_matrix(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e0fdea5-5291-4745-bcb5-fd25fe0f2cfc",
   "metadata": {},
   "source": [
    "## 7. Save Model Artefacts\n",
    "\n",
    "We save the trained XGBoost model and label encoder using `joblib`.  \n",
    "This allows us to reuse the classifier later without retraining."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8437b379-aadc-456b-b479-781076d7330b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved model and label encoder to Artefacts folder ✅\n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "import os\n",
    "\n",
    "# Save model and label encoder\n",
    "joblib.dump(xgb, \"Artefacts/it_subfield_xgb_model_v2.3.pkl\")\n",
    "joblib.dump(le, \"Artefacts/it_subfield_label_encoder_v2.3.pkl\")\n",
    "\n",
    "print(\"Saved model and label encoder to Artefacts folder ✅\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "455cecc8-0e4a-40dc-be2b-8ea7ae3bf019",
   "metadata": {},
   "source": [
    "## Classification Results Summary (v2.3 – SPECTER + XGBoost)\n",
    "\n",
    "The classifier achieved the following evaluation metrics on the test set:\n",
    "\n",
    "- **Accuracy:** 83%\n",
    "- **Macro F1-score:** 0.80\n",
    "- **Weighted F1-score:** 0.82\n",
    "\n",
    "### Per-Class F1 Scores:\n",
    "\n",
    "| Subfield | F1 Score | Comments |\n",
    "|----------|----------|----------|\n",
    "| CLD      | 0.87     | High accuracy; well-separated from others |\n",
    "| IOTNET   | 0.83     | Strong performance, minor confusion with CLD/SEC |\n",
    "| OPS      | 0.61     | Lower recall; some confusion with IOTNET/CLD (few samples) |\n",
    "| SEC      | 0.89     | Best performer; strong identity in embedding space |\n",
    "\n",
    "**Observations:**\n",
    "- The model is robust for most subfields, but struggles with recall on the rarest class (OPS).\n",
    "- Most confusion occurs between OPS and IOTNET/CLD, possibly due to overlap in operational and infrastructure language.\n",
    "\n",
    "---\n",
    "\n",
    "We now proceed to hyperparameter tuning (v2.4) to improve results, especially for underrepresented subfields."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd00cb4e-f1bf-4a94-b9fd-c986a22036bc",
   "metadata": {},
   "source": [
    "### Confusion Matrix (Heatmap)\n",
    "\n",
    "We plot the confusion matrix as a heatmap to visualize where the model is confusing between subfields.\n",
    "\n",
    "- Darker diagonal = better performance.\n",
    "- Off-diagonal values = misclassifications."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6ce82d35-5c7c-4716-990a-ebf020b67031",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# Generate confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Create heatmap\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=label_names, yticklabels=label_names)\n",
    "plt.xlabel(\"Predicted Label\")\n",
    "plt.ylabel(\"True Label\")\n",
    "plt.title(\"Confusion Matrix – IT Subfield Classifier (v2.3)\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22439f31-47e4-45b2-8fde-2da0554ee7fb",
   "metadata": {},
   "source": [
    "## 8. Hyperparameter Tuning (XGBoost)\n",
    "\n",
    "We use `GridSearchCV` to optimize key hyperparameters:\n",
    "\n",
    "- `max_depth`: Maximum tree depth\n",
    "- `learning_rate`: Step size shrinkage\n",
    "- `n_estimators`: Number of boosting rounds\n",
    "\n",
    "The best parameters are selected based on 3-fold cross-validated macro F1-score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "95c941e7-33b3-4863-ab0d-4b1adcda4275",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 18 candidates, totalling 54 fits\n",
      "✅ Best Parameters: {'learning_rate': 0.2, 'max_depth': 3, 'n_estimators': 200}\n",
      "✅ Best Macro F1 Score (CV average): 0.7755614159995838\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "# Define hyperparameter grid\n",
    "param_grid = {\n",
    "    'max_depth': [3, 5, 7],\n",
    "    'learning_rate': [0.05, 0.1, 0.2],\n",
    "    'n_estimators': [100, 200]\n",
    "}\n",
    "\n",
    "# Initialize base model (remove deprecated args)\n",
    "xgb_base = XGBClassifier(eval_metric='mlogloss', random_state=42)\n",
    "\n",
    "# Grid Search with 3-fold CV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=xgb_base,\n",
    "    param_grid=param_grid,\n",
    "    cv=3,\n",
    "    scoring='f1_macro',\n",
    "    verbose=1,\n",
    "    n_jobs=1  # Avoids BrokenProcessPool in Jupyter\n",
    ")\n",
    "\n",
    "# Fit to training data\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Show best parameters and best macro F1\n",
    "print(\"✅ Best Parameters:\", grid_search.best_params_)\n",
    "print(\"✅ Best Macro F1 Score (CV average):\", grid_search.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "16b3b14b-6c6c-48f0-bf6a-7b51a77e0138",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report (Tuned XGBoost):\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         CLD       0.88      0.85      0.86        33\n",
      "      IOTNET       0.80      0.89      0.84        27\n",
      "         OPS       0.80      0.53      0.64        15\n",
      "         SEC       0.83      0.92      0.87        26\n",
      "\n",
      "    accuracy                           0.83       101\n",
      "   macro avg       0.83      0.80      0.80       101\n",
      "weighted avg       0.83      0.83      0.83       101\n",
      "\n",
      "Confusion Matrix:\n",
      "\n",
      "[[28  1  2  2]\n",
      " [ 1 24  0  2]\n",
      " [ 3  3  8  1]\n",
      " [ 0  2  0 24]]\n"
     ]
    }
   ],
   "source": [
    "# Use best estimator from grid search\n",
    "xgb_tuned = grid_search.best_estimator_\n",
    "y_pred_tuned = xgb_tuned.predict(X_test)\n",
    "\n",
    "# Classification report\n",
    "print(\"Classification Report (Tuned XGBoost):\\n\")\n",
    "print(classification_report(y_test, y_pred_tuned, target_names=label_names))\n",
    "\n",
    "# Confusion matrix\n",
    "print(\"Confusion Matrix:\\n\")\n",
    "print(confusion_matrix(y_test, y_pred_tuned))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1c921216-8c8b-4654-b074-e63b843da660",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Saved tuned model as v2.4\n"
     ]
    }
   ],
   "source": [
    "joblib.dump(xgb_tuned, \"Artefacts/it_subfield_xgb_model_v2.4_tuned.pkl\")\n",
    "print(\"✅ Saved tuned model as v2.4\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a4830ec-a8bd-4995-ab86-604aed2f0d4b",
   "metadata": {},
   "source": [
    "### Tuning Summary and Result Analysis\n",
    "\n",
    "We performed hyperparameter tuning using `GridSearchCV` to find the optimal configuration for the XGBoost classifier on SPECTER embeddings.  \n",
    "The goal was to improve performance on the IT subfield classification task, especially for lower-performing classes like OPS.\n",
    "\n",
    "---\n",
    "\n",
    "#### 🔧 Parameter Grid Used\n",
    "\n",
    "We searched across:\n",
    "- `max_depth`: [3, 5, 7] – controls tree depth (model complexity)\n",
    "- `learning_rate`: [0.05, 0.1, 0.2] – controls how much each tree contributes\n",
    "- `n_estimators`: [100, 200] – number of boosting rounds\n",
    "\n",
    "---\n",
    "\n",
    "#### ✅ Best Parameters Found\n",
    "\n",
    "{'learning_rate': 0.2, 'max_depth': 3, 'n_estimators': 200}\n",
    "\n",
    "---\n",
    "\n",
    "#### 📊 Final Evaluation on Test Set (v2.4 – Tuned XGBoost)\n",
    "- **Accuracy**: 0.83  \n",
    "- **Macro F1-score**: 0.80  \n",
    "- **Weighted F1-score**: 0.83  \n",
    "\n",
    "---\n",
    "\n",
    "#### 🔍 Class-wise F1 Breakdown:\n",
    "\n",
    "| Subfield | F1 Score | Notes |\n",
    "|----------|----------|-------|\n",
    "| **CLD**    | 0.86     | Strong, high precision and recall |\n",
    "| **IOTNET** | 0.84     | Consistent, slight confusion with CLD and SEC |\n",
    "| **OPS**    | 0.64     | Lowest recall; frequent confusion with CLD/IOTNET; fewest samples |\n",
    "| **SEC**    | 0.87     | Best performer; nearly all predictions correct |\n",
    "\n",
    "---\n",
    "\n",
    "⸻\n",
    "\n",
    "### 🧠 Interpretation\n",
    "\n",
    "- Performance remained stable after tuning, with minimal change from the default model (v2.3).\n",
    "- Shallow trees (`max_depth = 3`) combined with more boosting rounds (`n_estimators = 200`) helped regularize the model and likely prevented overfitting.\n",
    "- Subfields like **CLD**, **SEC**, and **IOTNET** perform very well, with clear boundaries in SPECTER embedding space.\n",
    "- **OPS** remains most challenging, with improvement in precision but still limited recall due to its low sample size and some conceptual overlap.\n",
    "- Most confusion occurs between **OPS**, **CLD**, and **IOTNET**, which aligns with operational/infrastructure thematic similarity in abstracts.\n",
    "\n",
    "⸻\n",
    "\n",
    "### 🧪 Next Steps \n",
    "\n",
    "- Gather **more data** for underrepresented classes (OPS) to improve recall  \n",
    "- Add **custom features** (e.g., operational keyword flags, title-only embeddings) to further separate OPS  \n",
    "- Explore **ensemble models** (e.g., voting between XGBoost and Logistic Regression) for further stability  \n",
    "- Fine-tune **transformer-based models** or experiment with domain-adaptive SPECTER/SciBERT embeddings for additional gains  \n",
    "\n",
    "---\n",
    "\n",
    "Overall, this tuned model (v2.4) serves as a robust and stable baseline for IT subfield classification using SPECTER + XGBoost.  \n",
    "Further improvements will likely require more data or richer features, rather than hyperparameter tuning alone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0ab3042-b7b3-4667-bbcf-35eaff7fb409",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
